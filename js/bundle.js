/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/actions.js":
/*!***********************!*\
  !*** ./js/actions.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Actions; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./js/vector.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Actions = /*#__PURE__*/function () {\n  function Actions(game, dom, tutorial, tiles) {\n    _classCallCheck(this, Actions);\n\n    this.game = game;\n    this.dom = dom;\n    this.tutorial = tutorial;\n    this.scores = null;\n    this.mouseX;\n    this.mouseY;\n    this.handleCanvas();\n    this.handleButtonClicks();\n    this.handleKeyListeners();\n    this.handleTileListeners(tiles);\n    this.towerInfo = null;\n  }\n\n  _createClass(Actions, [{\n    key: \"handleCanvas\",\n    value: function handleCanvas() {\n      this.dom.canvas.addEventListener(\"mousemove\", this.handleCanvasMove.bind(this));\n      this.dom.canvas.addEventListener(\"mouseover\", this.handleCanvasOver.bind(this));\n      this.dom.canvas.addEventListener(\"mouseout\", this.handleCanvasOut.bind(this));\n      this.dom.canvas.addEventListener(\"click\", this.handleCanvasClick.bind(this));\n      this.dom.canvas.addEventListener(\"dblclick\", this.handleCanvasDblClick.bind(this));\n    }\n  }, {\n    key: \"handleCanvasMove\",\n    value: function handleCanvasMove(event) {\n      this.mouseX = event.offsetX;\n      this.mouseY = event.offsetY;\n      var towers = this.game.towers;\n      if (towers.length < 1) return;\n      var tower = towers[towers.length - 1];\n\n      if (!tower.placed && this.game.placingTower === true) {\n        tower.location.x = this.mouseX;\n        tower.location.y = this.mouseY;\n      }\n    }\n  }, {\n    key: \"handleCanvasOver\",\n    value: function handleCanvasOver() {\n      if (this.game.towers.length < 1) return;\n      this.game.towers[this.game.towers.length - 1].visible = true;\n    }\n  }, {\n    key: \"handleCanvasOut\",\n    value: function handleCanvasOut() {\n      if (this.game.placingTower) {\n        this.game.placingTower = false;\n        this.game.towers.splice(this.game.towers.length - 1, 1);\n      }\n    }\n  }, {\n    key: \"handleCanvasClick\",\n    value: function handleCanvasClick() {\n      var col = Math.floor(this.mouseX / this.game.cellSize);\n      var row = Math.floor(this.mouseY / this.game.cellSize);\n      var cell = this.game.grid[col][row];\n      this.game.resetSelects();\n\n      if (this.game.placingTower) {\n        this.game.checkTowerPlacement(cell);\n      } else {\n        for (var i = 0; i < this.game.towers.length; i++) {\n          var tower = this.game.towers[i];\n\n          if (tower.location.x === cell.center.x && tower.location.y === cell.center.y) {\n            if (tower.selected) {\n              tower.deselect(true);\n            } else {\n              tower.select();\n            }\n          } else {\n            tower.selected = false;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"handleCanvasDblClick\",\n    value: function handleCanvasDblClick() {\n      var gridCol = Math.floor(this.mouseX / this.game.cellSize);\n      var gridRow = Math.floor(this.mouseY / this.game.cellSize);\n      var cell = this.game.grid[gridCol][gridRow];\n      this.game.resetSelects();\n\n      for (var i = 0; i < this.game.towers.length; i++) {\n        var tower = this.game.towers[i];\n\n        if (tower.location.x === cell.center.x && tower.location.y === cell.center.y) {\n          this.game.selectAllTowers(tower.type, tower.level);\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"handleButtonClicks\",\n    value: function handleButtonClicks() {\n      var _this = this;\n\n      this.dom.audio.addEventListener(\"click\", this.audioClick.bind(this));\n      this.dom.wave.addEventListener(\"click\", this.waveClick.bind(this));\n      this.dom.upgrade.addEventListener(\"click\", this.upgradeClick.bind(this));\n      this.dom.sell.addEventListener(\"click\", this.sellClick.bind(this));\n      this.dom.auto.addEventListener(\"change\", function (e) {\n        return _this.autoWaveToggle(e, _this.game);\n      });\n    }\n  }, {\n    key: \"audioClick\",\n    value: function audioClick() {\n      if (this.game.muted) {\n        this.game.muted = false;\n        this.game.sound.play();\n        this.dom.audioImg.style.filter = \"invert(70%)\";\n      } else {\n        this.game.muted = true;\n        this.game.sound.pause();\n        this.dom.audioImg.style.filter = \"invert(20%)\";\n      }\n    }\n  }, {\n    key: \"autoWaveToggle\",\n    value: function autoWaveToggle(e, game) {\n      if (e.currentTarget.checked) {\n        game.autoWave = true;\n      } else {\n        game.autoWave = false;\n      }\n    }\n  }, {\n    key: \"waveClick\",\n    value: function waveClick() {\n      if (!this.game.sendingWave && this.game.gameStarted && !this.game.gameOver) {\n        this.game.wave += 1;\n        this.game.sendingWave = true;\n        this.game.waveTimer = 400;\n\n        if (this.game.wave === 1) {\n          this.dom.waveText.innerText = \"Next Wave\";\n          this.dom.towerMenu.classList.remove(\"active\");\n          this.tutorial.showInfo(\"start\");\n        }\n\n        this.dom.wave.classList.remove(\"clickable\");\n        this.game.nextWave();\n      }\n    }\n  }, {\n    key: \"upgradeClick\",\n    value: function upgradeClick() {\n      var _this2 = this;\n\n      this.game.selectedTowers.forEach(function (tower) {\n        if (tower.canUpgrade) {\n          if (_this2.game.bits - tower.upgrade >= 0) {\n            _this2.game.bits -= tower.upgrade;\n            _this2.game.cr -= tower.upgrade;\n            tower.handleUpgrade();\n          } else {\n            _this2.game.actions.blinkBank();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"sellClick\",\n    value: function sellClick() {\n      var _this3 = this;\n\n      this.game.selectedTowers.forEach(function (tower) {\n        tower.deselect(false);\n        _this3.game.bits += tower.upgrade / 2;\n        _this3.game.cr += tower.upgrade / 2;\n      });\n      this.game.resetSelects();\n      this.game.loadPaths();\n\n      for (var c = 0; c < this.game.numCols; c++) {\n        for (var r = 0; r < this.game.numRows; r++) {\n          this.game.grid[c][r].loadAdjacentCells();\n        }\n      }\n\n      this.game.path = this.game.getPath();\n    }\n  }, {\n    key: \"handleKeyListeners\",\n    value: function handleKeyListeners() {\n      var _this4 = this;\n\n      document.addEventListener(\"keydown\", function (event) {\n        if (event.keyCode === 27) {\n          _this4.game.placingTower = false;\n\n          if (_this4.game.selectedTowers.length) {\n            _this4.game.resetSelects();\n          }\n\n          if (_this4.game.towers.length && !_this4.game.towers[_this4.game.towers.length - 1].placed) {\n            _this4.game.towers.splice(_this4.game.towers.length - 1, 1);\n          }\n        } else if (event.keyCode === 49) {\n          _this4.towerKey(0);\n        } else if (event.keyCode === 50) {\n          _this4.towerKey(1);\n        } else if (event.keyCode === 51) {\n          _this4.towerKey(2);\n        } else if (event.keyCode === 52) {\n          _this4.towerKey(3);\n        } else if (event.keyCode === 83) {\n          _this4.sellClick();\n        } else if (event.keyCode === 81) {\n          _this4.upgradeClick();\n        } else if (event.keyCode === 73) {\n          _this4.tutorial.toggleTutorial();\n        } else if (event.keyCode === 72) {\n          _this4.tutorial.toggleHotkeys();\n        }\n      });\n    }\n  }, {\n    key: \"towerKey\",\n    value: function towerKey(towerNum) {\n      this.game.placingTower = false;\n      var towers = this.game.towers;\n\n      if (towers.length && !towers[towers.length - 1].placed) {\n        towers.pop();\n      }\n\n      this.game.tileDivs[towerNum].click();\n      var currentTower = towers[towers.length - 1];\n\n      if (!currentTower.placed) {\n        currentTower.location = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.mouseX, this.mouseY);\n      }\n\n      currentTower.visible = true;\n    }\n  }, {\n    key: \"handleTileListeners\",\n    value: function handleTileListeners(tiles) {\n      var _this5 = this;\n\n      for (var i = 0; i < tiles.length; i++) {\n        var tileDiv = tiles[i];\n        tileDiv.addEventListener(\"mouseover\", function (e) {\n          return _this5.tileRollOver(e, _this5.game);\n        }, false);\n        tileDiv.addEventListener(\"mouseout\", function (e) {\n          return _this5.tileRollOut(e, _this5.game);\n        }, false);\n        tileDiv.addEventListener(\"click\", function (e) {\n          return _this5.tileClicked(e, _this5.game);\n        }, false);\n      }\n    }\n  }, {\n    key: \"tileRollOver\",\n    value: function tileRollOver(e, game) {\n      game.showTowerDivInfo = e.currentTarget;\n    }\n  }, {\n    key: \"tileRollOut\",\n    value: function tileRollOut(e, game) {\n      game.showTowerDivInfo = null;\n    }\n  }, {\n    key: \"tileClicked\",\n    value: function tileClicked(e, game) {\n      var towerDiv = e.currentTarget;\n\n      if (game.placingTower === true) {\n        if (!game.towers[game.towers.length - 1].placed) {\n          game.towers.splice(game.towers.length - 1, 1);\n        }\n      }\n\n      if (game.bits >= towerDiv.cost) {\n        game.createTower(towerDiv);\n        game.currentTileDiv = towerDiv;\n        game.placingTower = true;\n\n        if (game.selectedTowers) {\n          game.resetSelects();\n        }\n      } else {\n        game.actions.blinkBank();\n      }\n    }\n  }, {\n    key: \"blinkBank\",\n    value: function blinkBank() {\n      var bank = this.dom.bank;\n\n      if (!bank.classList.contains(\"flashing\")) {\n        bank.classList.add(\"flashing\");\n        setTimeout(function () {\n          bank.classList.remove(\"flashing\");\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"showTowerInfo\",\n    value: function showTowerInfo() {\n      var tower = this.getTower();\n      this.toggleEditButtons(tower);\n      if (!tower || tower === this.tower) return;\n      this.tower = tower;\n      this.dom.typeP.innerHTML = tower.type.toUpperCase();\n      this.dom.damageP.innerHTML = tower.damage;\n      this.dom.rangeP.innerHTML = tower.range;\n      this.dom.speedP.innerHTML = 2000 - tower.cooldown;\n\n      if (tower.canUpgrade || this.game.showTowerDivInfo) {\n        this.dom.nextP.innerHTML = tower.upgrade + \"¥\";\n      } else {\n        this.dom.nextP.innerHTML = \"Max\";\n      }\n    }\n  }, {\n    key: \"getTower\",\n    value: function getTower() {\n      return this.game.showTowerDivInfo ? this.game.showTowerDivInfo : this.game.selectedTowers[this.game.selectedTowers.length - 1];\n    }\n  }, {\n    key: \"toggleEditButtons\",\n    value: function toggleEditButtons(tower) {\n      var upChange = this.dom.upgrade.style.opacity;\n      var sellChange = this.dom.sell.style.opacity;\n\n      if (tower) {\n        this.dom.upgrade.style.opacity = tower.canUpgrade ? 100 : 0;\n        this.dom.sell.style.opacity = tower.placed ? 100 : 0;\n      } else {\n        this.dom.upgrade.style.opacity = 0;\n        this.dom.sell.style.opacity = 0;\n      }\n\n      if (upChange !== this.dom.upgrade.style.opacity) {\n        this.dom.upgrade.classList.toggle(\"clickable\");\n      }\n\n      if (sellChange !== this.dom.sell.style.opacity) {\n        this.dom.sell.classList.toggle(\"clickable\");\n      }\n    }\n  }, {\n    key: \"updateStats\",\n    value: function updateStats() {\n      for (var i = 0; i < this.dom.infoTiles.length; i++) {\n        var title = this.dom.infoTiles[i];\n        var value = document.createElement(\"p\");\n\n        if (title.innerHTML.includes(\"Bank\")) {\n          title.innerHTML = \"<h4>Bank</h4> <br/>\";\n          value.innerHTML = this.game.bits + \"¥\";\n        } else if (title.innerHTML.includes(\"Lives\")) {\n          title.innerHTML = \"<h4>Lives</h4> <br/>\";\n          value.innerHTML = this.game.lives;\n        } else if (title.innerHTML.includes(\"Score\")) {\n          title.innerHTML = \"<h4>Score</h4> <br/>\";\n          value.innerHTML = this.game.score;\n        } else if (title.innerHTML.includes(\"Wave\")) {\n          title.innerHTML = \"<h4>Wave</h4> <br/>\";\n          value.innerHTML = this.game.wave;\n        }\n\n        title.appendChild(value);\n      }\n    }\n  }, {\n    key: \"handleGameOver\",\n    value: function handleGameOver() {\n      var _this6 = this;\n\n      this.game.gameOver = true;\n      this.game.context.fillStyle = \"rgba(125, 125, 125, 0.6)\";\n      this.game.context.fillRect(0, 0, 840, 560);\n      this.dom.gameOver.style.opacity = 100;\n      this.dom.gameOver.style.width = \"100%\";\n      this.dom.gameOver.style.height = \"100%\";\n      this.dom.overTitle.style.display = \"inline-block\";\n      var highscores = firebase.database().ref(\"scores\").orderByChild(\"score\").limitToLast(10);\n      this.game.f = this.game.score;\n      var score = window.localStorage.getItem(\"score\");\n\n      if (score && score < this.game.f || !score) {\n        score = this.game.f;\n        window.localStorage.setItem(\"score\", this.game.f);\n      }\n\n      this.dom[\"final\"].innerHTML = \"Final Score: \".concat(this.game.f);\n      this.dom.local.innerHTML = \"Local Highest: \".concat(score);\n      setTimeout(function () {\n        _this6.dom.holder.style.opacity = 0;\n        _this6.dom.gameOver.style.top = \"15%\";\n        _this6.dom.overTitle.style.color = \"rgb(171, 171, 171)\";\n        _this6.dom.terminal.style.display = \"flex\";\n        _this6.dom.canvas.style.backgroundColor = \"\";\n        _this6.dom.tutorial.style.opacity = 0;\n        _this6.dom.topBar.style.opacity = 0;\n        _this6.dom.bottomBar.style.opacity = 0;\n        setTimeout(function () {\n          _this6.dom.terminal.style.opacity = 100;\n\n          _this6.scores.handleScores(highscores);\n\n          setTimeout(function () {\n            _this6.game.context.clearRect(0, 0, 840, 560);\n          }, 1000);\n        }, 1000);\n      }, 1000);\n    }\n  }, {\n    key: \"newGame\",\n    value: function newGame() {\n      this.dom.gameOver.style.opacity = 0;\n      this.dom.gameOver.style.width = \"0px\";\n      this.dom.gameOver.style.height = \"0px\";\n      this.dom.overTitle.style.display = \"none\";\n      this.dom.terminal.style.display = \"none\";\n      this.dom.holder.style.opacity = 100;\n      this.dom.footer.style.opacity = 100;\n      this.dom.gameOver.style.top = \"40%\";\n      this.dom.progress.style.width = \"0%\";\n      this.dom.terminal.removeChild(this.dom.terminal.lastChild);\n\n      while (this.dom.scores.firstChild) {\n        this.dom.scores.removeChild(this.dom.scores.lastChild);\n      }\n\n      while (this.dom.towerMenu.firstChild) {\n        this.dom.towerMenu.removeChild(this.dom.towerMenu.lastChild);\n      }\n\n      this.dom.auto.checked = false;\n      this.dom.waveText.innerText = \"First Wave\";\n      this.dom.wave.classList.remove(\"active\");\n      this.dom.topBar.style.opacity = 0;\n      this.dom.bottomBar.style.opacity = 0;\n      this.dom.play.style.display = \"\";\n      this.dom.startText.style.display = \"flex\";\n\n      if (this.dom.tutorialOpen) {\n        this.tutorial.toggleTutorial();\n      }\n\n      if (this.dom.hotkeysOpen) {\n        this.tutorial.toggleHotkeys();\n      }\n\n      this.init();\n    }\n  }]);\n\n  return Actions;\n}();\n\n\n\n//# sourceURL=webpack:///./js/actions.js?");

/***/ }),

/***/ "./js/attack.js":
/*!**********************!*\
  !*** ./js/attack.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Attack; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Attack = /*#__PURE__*/function () {\n  function Attack(loc, sprites, context, angle, idx, level, type, damage, speed) {\n    _classCallCheck(this, Attack);\n\n    this.location = loc.copy();\n    this.sprites = sprites;\n    this.context = context;\n    this.angle = angle;\n    this.radius = 10;\n    this.idx = idx;\n    this.level = level;\n    this.type = type;\n    this.speed = 5;\n    this.hit = false;\n    this.damage = damage;\n    this.speed = speed;\n    this.width = 18;\n    this.height = 18;\n  }\n\n  _createClass(Attack, [{\n    key: \"run\",\n    value: function run() {\n      this.update();\n      this.render();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.location.y += Math.sin(this.angle) * this.speed;\n      this.location.x += Math.cos(this.angle) * this.speed;\n\n      if (this.location.x > 840 || this.location.x < 0 || this.location.y > 560 || this.location.y < 0) {\n        this.hit = true;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.context.save();\n      this.context.translate(this.location.x, this.location.y);\n      this.context.rotate(this.angle);\n      this.context.drawImage(this.sprites.attack, this.level * this.width, this.idx * this.height, this.width, this.height, -this.width / 2, -this.height / 2, this.width, this.height);\n      this.context.restore();\n    }\n  }]);\n\n  return Attack;\n}();\n\n\n\n//# sourceURL=webpack:///./js/attack.js?");

/***/ }),

/***/ "./js/cell.js":
/*!********************!*\
  !*** ./js/cell.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Cell; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./js/vector.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Cell = /*#__PURE__*/function () {\n  function Cell(id, grid, size, context, wallImg, selectImg, col, row) {\n    _classCallCheck(this, Cell);\n\n    this.id = id;\n    this.grid = grid;\n    this.size = size;\n    this.location = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](col * this.size, row * this.size);\n    this.center = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.location.x + this.size / 2, this.location.y + this.size / 2);\n    this.context = context;\n    this.col = col;\n    this.row = row; // * images\n\n    this.wallImg = wallImg;\n    this.selectImg = selectImg;\n    this.img = this.wallImg; // * path finding\n\n    this.adjacent = [];\n    this.smallestAdjacent = null;\n    this.value = -1; // * manage state\n\n    this[\"static\"] = false;\n    this.occupied = false;\n    this.attacked = false;\n    this.selected = false; // * manage attack state\n\n    this.attackDamage = null;\n    this.attackSlow = false;\n    this.attackTimeout = 0; // * show invalid placement\n\n    this.cancelled = false;\n    this.cancTimeout = 0;\n  }\n\n  _createClass(Cell, [{\n    key: \"loadAdjacentCells\",\n    value: function loadAdjacentCells() {\n      // * up\n      if (this.row > 0 && !this.occupied && !this.grid[this.col][this.row - 1].occupied) {\n        this.adjacent.push(this.grid[this.col][this.row - 1]);\n      } // * right\n\n\n      if (this.col < this.grid.length - 1 && !this.occupied && !this.grid[this.col + 1][this.row].occupied) {\n        this.adjacent.push(this.grid[this.col + 1][this.row]);\n      } // * down\n\n\n      if (this.row < this.grid[this.col].length - 1 && !this.occupied && !this.grid[this.col][this.row + 1].occupied) {\n        this.adjacent.push(this.grid[this.col][this.row + 1]);\n      } // * left\n\n\n      if (this.col > 0 && !this.occupied && !this.grid[this.col - 1][this.row].occupied) {\n        this.adjacent.push(this.grid[this.col - 1][this.row]);\n      }\n    }\n  }, {\n    key: \"getShortestRoute\",\n    value: function getShortestRoute() {\n      var smallest, idx;\n\n      for (var i = 0; i < this.adjacent.length; i++) {\n        if (this.adjacent[i].value < smallest || smallest === undefined) {\n          smallest = this.adjacent[i].value;\n          idx = i;\n        }\n      }\n\n      this.smallestAdjacent = this.adjacent[idx];\n    }\n  }, {\n    key: \"attack\",\n    value: function attack(damage, slow) {\n      this.attacked = true;\n      this.attackDamage = damage;\n      this.attackSlow = slow;\n      this.attackTimeout = 2 + slow;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.occupied = false;\n      this.cancelled = true;\n      this.cancTimeout = 3;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout() {\n      this.cancTimeout--;\n\n      if (this.cancTimeout <= 0) {\n        this.cancelled = false;\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      this.checkAttack();\n      this.render();\n    }\n  }, {\n    key: \"checkAttack\",\n    value: function checkAttack() {\n      if (this.attacked) {\n        this.attackTimeout--;\n\n        if (this.attackTimeout <= 0) {\n          this.attacked = false;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this[\"static\"] || this.occupied) {\n        this.renderImage(\"img\");\n        return;\n      }\n\n      if (this.cancelled) {\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.6)\";\n        this.timeout();\n        this.context.fillRect(this.location.x, this.location.y, this.size, this.size);\n      } // this.showGridNums(); // * display grid lines and pathing values\n\n    }\n  }, {\n    key: \"renderImage\",\n    value: function renderImage(img) {\n      this.context.save();\n      this.context.translate(this.center.x, this.center.y);\n      this.context.drawImage(this[img], -this[img].width / 2, -this[img].height / 2);\n      this.context.restore();\n    } // showGridNums() {\n    //   this.context.strokeStyle = \"#333333\";\n    //   this.context.fillStyle = \"#333333\";\n    //   this.context.lineWidth = 1;\n    //   this.context.strokeRect(\n    //     this.location.x,\n    //     this.location.y,\n    //     this.size,\n    //     this.size\n    //   );\n    //   this.context.fillText(\n    //     this.value,\n    //     this.location.x + 15,\n    //     this.location.y + 15\n    //   );\n    // }\n\n  }]);\n\n  return Cell;\n}();\n\n\n\n//# sourceURL=webpack:///./js/cell.js?");

/***/ }),

/***/ "./js/creep.js":
/*!*********************!*\
  !*** ./js/creep.js ***!
  \*********************/
/*! exports provided: Slime, Gork, Uwo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Slime\", function() { return Slime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gork\", function() { return Gork; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uwo\", function() { return Uwo; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./js/vector.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Creep = /*#__PURE__*/function () {\n  function Creep(game, sprites, location, difficulty) {\n    _classCallCheck(this, Creep);\n\n    // * stats\n    this.game = game;\n    this.sprites = sprites;\n    this.difficulty = difficulty;\n    this.worth = 5 * this.difficulty;\n    this.pointValue = 100 * this.difficulty;\n    this.alive = true;\n    this.w = this.maxHealth; // * movement\n\n    this.location = location;\n    this.prevCell = null;\n    this.currentCell = this.getCell();\n    this.nextCell = null;\n    this.stuck = false;\n    this.velocity = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0);\n    this.acceleration = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0); // * default\n\n    this.context = this.game.context;\n    this.radius = 12;\n    this.color = \"rgb(225, 225, 225)\"; // * img\n\n    this.currSheet = 0;\n    this.dir = 0;\n    this.frame = 0;\n    this.step = 0; // * slow\n\n    this.slowed = false;\n    this.slowTimeout = 0;\n  }\n\n  _createClass(Creep, [{\n    key: \"checkBorder\",\n    value: function checkBorder() {\n      if (this.location.x <= 45 || this.location.x > 795) {\n        this.velocity.x = -this.velocity.x / 2;\n      }\n\n      if (this.location.y <= 45 || this.location.y > 515) {\n        this.velocity.y = -this.velocity.y / 2;\n      }\n    }\n  }, {\n    key: \"checkWalls\",\n    value: function checkWalls() {\n      var cell = this.getCell();\n\n      if (cell.occupied && !this.stuck && this.prevCell) {\n        this.velocity.x = -this.velocity.x / 2;\n        this.velocity.y = -this.velocity.y / 2;\n      }\n    }\n  }, {\n    key: \"checkHit\",\n    value: function checkHit() {\n      if (this.currentCell.attacked) {\n        this.health -= this.currentCell.attackDamage;\n        if (this.currentCell.attackSlow) this.slow();\n      }\n    }\n  }, {\n    key: \"checkAlive\",\n    value: function checkAlive() {\n      if (this.health <= 0) {\n        this.game.bits += this.worth;\n        this.game.score += this.pointValue;\n        this.game.cr += this.worth + this.pointValue;\n        this.alive = false;\n      }\n    }\n  }, {\n    key: \"checkSheet\",\n    value: function checkSheet() {\n      if (this.slowed) {\n        this.currSheet = 4;\n      } else if (this.health <= this.maxHealth * 0.25) {\n        this.currSheet = 3;\n      } else if (this.health <= this.maxHealth * 0.5) {\n        this.currSheet = 2;\n      } else if (this.health <= this.maxHealth * 0.75) {\n        this.currSheet = 1;\n      } else {\n        this.currSheet = 0;\n      }\n    }\n  }, {\n    key: \"takeLife\",\n    value: function takeLife() {\n      this.alive = false;\n\n      if (!this.game.gameOver) {\n        this.game.lives -= 1;\n        this.game.cr -= 1;\n        var lives = document.querySelector(\"#info-lives\");\n\n        if (!lives.classList.contains(\"flashing\")) {\n          lives.classList.add(\"flashing\");\n          setTimeout(function () {\n            lives.classList.remove(\"flashing\");\n          }, 1000);\n        }\n      } // if (!this.game.muted) {\n      //     const lose = new Audio;\n      //     lose.setAttribute('src', 'sounds/lose_life.mp3');\n      //     lose.load();\n      //     lose.play();\n      // }\n\n    }\n  }, {\n    key: \"slow\",\n    value: function slow() {\n      this.slowed = true;\n      this.slowTimeout = 30;\n    }\n  }, {\n    key: \"moveSlow\",\n    value: function moveSlow() {\n      this.velocity.slow();\n      this.slowTimeout--;\n\n      if (this.slowTimeout <= 0) {\n        this.slowed = false;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      this.acceleration = this.acceleration.subGetNew(this.nextCell.center, this.currentCell.center);\n      this.acceleration.setMag(0.05);\n      this.setDir(this.nextCell.location);\n      this.velocity.add(this.acceleration);\n      this.velocity.normalize(this.slowed || this.stuck);\n\n      if (this.slowed) {\n        this.moveSlow();\n      }\n\n      this.location.add(this.velocity);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell() {\n      var col = Math.floor(this.location.x / this.game.cellSize);\n      var row = Math.floor(this.location.y / this.game.cellSize);\n      return this.game.grid[col][row];\n    }\n  }, {\n    key: \"setCells\",\n    value: function setCells() {\n      var cell = this.getCell();\n\n      if (cell === this.game.goal) {\n        this.takeLife();\n        return;\n      }\n\n      this.stuck = cell.occupied;\n\n      if (this.stuck) {\n        this.nextCell = this.prevCell;\n      } else {\n        this.prevCell = this.currentCell;\n        this.nextCell = cell.smallestAdjacent;\n      }\n\n      this.currentCell = cell;\n    }\n  }, {\n    key: \"setDir\",\n    value: function setDir(dest) {\n      var loc = this.currentCell.location;\n\n      if (dest.x > loc.x) {\n        // * right\n        this.dir = 2;\n      } else if (dest.x < loc.x) {\n        // * left\n        this.dir = 1;\n      } else if (dest.y < loc.y) {\n        // * up\n        this.dir = 3;\n      } else {\n        // * down\n        this.dir = 0;\n      }\n    }\n  }, {\n    key: \"stepAnimation\",\n    value: function stepAnimation() {\n      this.step++;\n\n      if (!this.slowed && this.step >= 10 || this.step >= 20) {\n        this.step = 0;\n        this.frame = (this.frame + 1) % 4;\n      }\n\n      this.drawFrame();\n    }\n  }, {\n    key: \"drawFrame\",\n    value: function drawFrame() {\n      this.context.save();\n      this.context.translate(this.location.x, this.location.y);\n      this.context.drawImage(this.sprites[this.type][this.currSheet], this.frame * this.size, this.dir * this.size, this.size, this.size, -this.size, -this.size - this.offset, this.size * 2, this.size * 2);\n      this.context.restore();\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      this.update();\n      this.render();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.checkWalls();\n      this.checkBorder();\n      this.checkHit();\n      this.checkAlive();\n      this.setCells();\n      this.move();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.checkSheet();\n      this.stepAnimation(); // this.drawCircle();\n    } // drawCircle() {\n    //   this.context.beginPath();\n    //   this.context.arc(\n    //     this.location.x,\n    //     this.location.y,\n    //     this.radius,\n    //     0,\n    //     Math.PI * 2\n    //   );\n    //   this.context.fillStyle = this.color;\n    //   this.context.fill();\n    // }\n\n  }]);\n\n  return Creep;\n}();\n\nvar Slime = /*#__PURE__*/function (_Creep) {\n  _inherits(Slime, _Creep);\n\n  var _super = _createSuper(Slime);\n\n  function Slime(game, sprites, location, difficulty) {\n    var _this;\n\n    _classCallCheck(this, Slime);\n\n    _this = _super.call(this, game, sprites, location, difficulty);\n    _this.type = \"slime\";\n    _this.maxHealth = game.wave * 350 * _this.difficulty;\n    _this.health = _this.maxHealth;\n    _this.size = 16;\n    _this.offset = 4;\n    return _this;\n  }\n\n  return Slime;\n}(Creep);\n\nvar Gork = /*#__PURE__*/function (_Creep2) {\n  _inherits(Gork, _Creep2);\n\n  var _super2 = _createSuper(Gork);\n\n  function Gork(game, sprites, location, difficulty) {\n    var _this2;\n\n    _classCallCheck(this, Gork);\n\n    _this2 = _super2.call(this, game, sprites, location, difficulty);\n    _this2.type = \"gork\";\n    _this2.maxHealth = game.wave * 800 * _this2.difficulty;\n    _this2.health = _this2.maxHealth;\n    _this2.size = 18;\n    _this2.offset = 4;\n    return _this2;\n  }\n\n  return Gork;\n}(Creep);\n\nvar Uwo = /*#__PURE__*/function (_Creep3) {\n  _inherits(Uwo, _Creep3);\n\n  var _super3 = _createSuper(Uwo);\n\n  function Uwo(game, sprites, location, difficulty) {\n    var _this3;\n\n    _classCallCheck(this, Uwo);\n\n    _this3 = _super3.call(this, game, sprites, location, difficulty);\n    _this3.type = \"uwo\";\n    _this3.maxHealth = game.wave * 1200 * _this3.difficulty;\n    _this3.health = _this3.maxHealth;\n    _this3.size = 32;\n    _this3.offset = 16;\n    return _this3;\n  }\n\n  return Uwo;\n}(Creep);\n\n\n\n//# sourceURL=webpack:///./js/creep.js?");

/***/ }),

/***/ "./js/dom.js":
/*!*******************!*\
  !*** ./js/dom.js ***!
  \*******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DomHandler; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DomHandler = function DomHandler() {\n  _classCallCheck(this, DomHandler);\n\n  // * main\n  this.holder = document.querySelector(\"#holder\");\n  this.play = document.querySelector(\"#play-button\");\n  this.startText = document.querySelector(\"#game-info\");\n  this.wrapper = document.querySelector(\"#canvas-wrapper\");\n  this.canvas = document.querySelector(\"canvas\");\n  this.footer = document.querySelector(\"footer\"); // * endgame\n\n  this.gameOver = document.querySelector(\"#game-over-screen\");\n  this.overTitle = document.querySelector(\"#game-over-title\");\n  this.terminal = document.querySelector(\"#score-terminal\");\n  this.scores = document.querySelector(\".scores\");\n  this[\"final\"] = document.querySelector(\"#local-score\");\n  this.local = document.querySelector(\"#local-top\"); // * tutorial\n\n  this.tutorialOpen = true;\n  this.tutorial = document.querySelector(\"#tutorial-window\");\n  this.tutorialSlide = document.querySelector(\"#tutorial-slide\");\n  this.tutorialText = document.querySelector(\"#tutorial-text\");\n  this.tutorialP = document.querySelector(\"#tutorial-text-p\");\n  this.tutorialIcon = document.querySelector(\"#tutorial-icon\"); // * hotkey info\n\n  this.hotkeysOpen = false;\n  this.hotkeysSlide = document.querySelector(\"#hotkeys-slide\");\n  this.hotkeysIcon = document.querySelector(\"#hotkeys-icon\");\n  this.hotkeysText = document.querySelector(\"#hotkeys-text\"); // * top nav\n\n  this.topBar = document.querySelector(\"#game-controls\");\n  this.infoTiles = document.querySelectorAll(\"#info > .info-tile\");\n  this.score = document.querySelector(\"#info-score\");\n  this.currWave = document.querySelector(\"#info-wave\");\n  this.lives = document.querySelector(\"#info-lives\");\n  this.bank = document.querySelector(\"#info-bits\");\n  this.audio = document.querySelector(\"#audio-button\");\n  this.audioImg = document.querySelector(\"#audio-button-img\");\n  this.autoBox = document.querySelector(\"#auto-container\");\n  this.auto = document.querySelector(\"input[name=auto-wave]\");\n  this.wave = document.querySelector(\"#wave-button\");\n  this.waveText = document.querySelector(\"#wave-text\");\n  this.progress = document.querySelector(\"#wave-progress\"); // * bottom nav\n\n  this.bottomBar = document.querySelector(\"#content-box\");\n  this.towerMenu = document.querySelector(\"#towers\"); // this.towerStats = document.querySelectorAll(\n  //   \"#tower-details > .detail-tile\"\n  // );\n\n  this.type = document.querySelector(\"#tower-type\");\n  this.typeH = document.querySelector(\"#type-header\");\n  this.typeP = document.querySelector(\"#type-p\");\n  this.damage = document.querySelector(\"#tower-damage\");\n  this.damageH = document.querySelector(\"#damage-header\");\n  this.damageP = document.querySelector(\"#damage-p\");\n  this.range = document.querySelector(\"#tower-range\");\n  this.rangeH = document.querySelector(\"#range-header\");\n  this.rangeP = document.querySelector(\"#range-p\");\n  this.speed = document.querySelector(\"#tower-speed\");\n  this.speedH = document.querySelector(\"#speed-header\");\n  this.speedP = document.querySelector(\"#speed-p\");\n  this.next = document.querySelector(\"#tower-next\");\n  this.nextH = document.querySelector(\"#next-header\");\n  this.nextP = document.querySelector(\"#next-p\");\n  this.towerEdits = document.querySelectorAll(\"#edit-tower-buttons > .edit-button\");\n  this.upgrade = document.querySelector(\"#upgrade-button\");\n  this.sell = document.querySelector(\"#sell-button\");\n};\n\n\n\n//# sourceURL=webpack:///./js/dom.js?");

/***/ }),

/***/ "./js/game.js":
/*!********************!*\
  !*** ./js/game.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Game; });\n/* harmony import */ var _loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader */ \"./js/loader.js\");\n/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions */ \"./js/actions.js\");\n/* harmony import */ var _tutorial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tutorial */ \"./js/tutorial.js\");\n/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cell */ \"./js/cell.js\");\n/* harmony import */ var _tower__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tower */ \"./js/tower.js\");\n/* harmony import */ var _creep__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./creep */ \"./js/creep.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\nvar Game = /*#__PURE__*/function () {\n  function Game(dom, sprites) {\n    _classCallCheck(this, Game);\n\n    // * add canvas\n    this.dom = dom;\n    this.sprites = sprites;\n    this.canvas = this.dom.canvas;\n    this.context = this.canvas.getContext(\"2d\"); // * game objects\n\n    this.grid = [];\n    this.towers = [];\n    this.attacks = []; // * creep management\n\n    this.creeps = [];\n    this.stages = {}; // * game stats\n\n    this.lives = 20;\n    this.bits = 200;\n    this.score = 0;\n    this.wave = 0;\n    this.difficulty = 1; // * grid specs\n\n    this.numBlocks = 35;\n    this.cellSize = 40;\n    this.numCols = 21;\n    this.numRows = 14;\n    this.start = null;\n    this.goal = null; // * track cells\n\n    this.border = [];\n    this.blocks = [];\n    this.selectedCells = []; // * pathing\n\n    this.validated = false;\n    this.loadGrid();\n    this.loadPaths(); // * draw path\n\n    this.path = this.getPath();\n    this.vertices = this.getVertices(this.path);\n    this.point = 10; // * tower buttons\n\n    this.tileDivs = this.createTiles(); // * track towers\n\n    this.showTowerDivInfo = null;\n    this.placingTower = false;\n    this.selectedTowers = []; // * wave tracking\n\n    this.autoWave = false;\n    this.sendingWave = false;\n    this.waveTimer = 0; // * music\n\n    this.sound = null;\n    this.muted = false; // * trackers\n    // this.cr = 220;\n    // this.c = 0;\n    // this.f;\n    // * bounds\n\n    this.gameStarted = false;\n    this.gameOver = false; // * add game element handlers\n\n    this.tutorial = new _tutorial__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this, dom);\n    this.loader = new _loader__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, dom, sprites);\n    this.actions = new _actions__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, dom, this.tutorial, this.tileDivs);\n  }\n\n  _createClass(Game, [{\n    key: \"checkTowerPlacement\",\n    value: function checkTowerPlacement(cell) {\n      if (cell[\"static\"] || cell.occupied) return;\n      cell.occupied = true;\n      this.loadPaths();\n\n      if (this.checkPaths(cell) && this.checkRoute()) {\n        this.placeTower(cell);\n      } else {\n        cell.cancel();\n        this.loadPaths();\n      }\n    }\n  }, {\n    key: \"checkPaths\",\n    value: function checkPaths(cell) {\n      var _this = this;\n\n      return this.creeps.every(function (creep) {\n        if (creep.currentCell === cell) return false;\n        var route = [creep.currentCell];\n\n        while (route.length) {\n          var checkCell = route.pop();\n\n          if (checkCell) {\n            if (checkCell.value === -1) {\n              continue;\n            } else if (checkCell === _this.goal) {\n              return true;\n            }\n\n            route.push(checkCell.smallestAdjacent);\n          }\n        }\n\n        return false;\n      });\n    }\n  }, {\n    key: \"checkRoute\",\n    value: function checkRoute() {\n      var route = [this.start];\n\n      while (route.length) {\n        var cell = route.pop();\n\n        if (cell.value === -1) {\n          return false;\n        } else if (cell === this.goal) {\n          return true;\n        }\n\n        route.push(cell.smallestAdjacent);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"resetSelects\",\n    value: function resetSelects() {\n      this.selectedTowers.forEach(function (tower) {\n        tower.deselect(true);\n      });\n      this.selectedTowers = [];\n      this.selectedCells = [];\n    }\n  }, {\n    key: \"selectAllTowers\",\n    value: function selectAllTowers(type, level) {\n      this.resetSelects();\n\n      for (var i = 0; i < this.towers.length; i++) {\n        var tower = this.towers[i];\n\n        if (tower.type === type && tower.level === level) {\n          tower.select();\n        } else {\n          tower.deselect(true);\n        }\n      }\n    }\n  }, {\n    key: \"createTiles\",\n    value: function createTiles() {\n      var tileDivs = [];\n\n      for (var i = 0; i < 4; i++) {\n        var tileDiv = this.addTowerStats(i);\n        this.dom.towerMenu.appendChild(tileDiv);\n        tileDivs.push(tileDiv);\n        var tileImg = new Image();\n        tileImg.src = \"/images/towers/tiles/\".concat(tileDiv.type, \".png\");\n        tileDiv.appendChild(tileImg);\n        var towerName = document.createElement(\"p\");\n        towerName.innerText = \"\".concat(tileDiv.cost, \"\\xA5\");\n        tileDiv.appendChild(towerName);\n      }\n\n      return tileDivs;\n    }\n  }, {\n    key: \"addTowerStats\",\n    value: function addTowerStats(i) {\n      var div = document.createElement(\"div\");\n      div.idx = i;\n\n      if (i === 0) {\n        div.type = \"earth\";\n        div.cost = 15;\n        div.upgrade = 30;\n        div.range = 100;\n        div.cooldown = 1000;\n        div.damage = 30;\n        div.speed = 8;\n      } else if (i === 1) {\n        div.type = \"water\";\n        div.cost = 30;\n        div.upgrade = 60;\n        div.range = 120;\n        div.cooldown = 400;\n        div.damage = 10;\n        div.speed = 1;\n      } else if (i === 2) {\n        div.type = \"fire\";\n        div.cost = 50;\n        div.upgrade = 100;\n        div.range = 100;\n        div.cooldown = 200;\n        div.damage = 20;\n        div.speed = 10;\n      } else {\n        div.type = \"air\";\n        div.cost = 100;\n        div.upgrade = 200;\n        div.range = 150;\n        div.cooldown = 1800;\n        div.damage = 100;\n        div.speed = 16;\n      }\n\n      return div;\n    }\n  }, {\n    key: \"createTower\",\n    value: function createTower(tileDiv) {\n      var tower = new _tower__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, this.dom, this.sprites, this.context, tileDiv.idx, tileDiv.cost, tileDiv.upgrade, tileDiv.type, tileDiv.range, tileDiv.damage, tileDiv.cooldown, tileDiv.speed);\n      this.towers.push(tower);\n    }\n  }, {\n    key: \"placeTower\",\n    value: function placeTower(cell) {\n      var tower = this.towers[this.towers.length - 1];\n      tower.cell = cell;\n      tower.location = cell.center.copy();\n      this.bits -= tower.cost; // this.cr -= tower.cost;\n\n      tower.placed = true;\n      this.placingTower = false;\n      this.path = this.getPath();\n    }\n  }, {\n    key: \"loadGrid\",\n    value: function loadGrid() {\n      var id = 0;\n\n      for (var c = 0; c < this.numCols; c++) {\n        this.grid.push([]);\n\n        for (var r = 0; r < this.numRows; r++) {\n          this.grid[c].push(new _cell__WEBPACK_IMPORTED_MODULE_3__[\"default\"](id++, this.grid, this.cellSize, this.context, this.sprites.wall, this.sprites.wallSelected, c, r));\n        }\n      }\n\n      this.initBorder();\n      this.initPosts();\n      this.initBlocks();\n    }\n  }, {\n    key: \"initBorder\",\n    value: function initBorder() {\n      for (var c = 0; c < this.numCols; c++) {\n        this.addBorderCell(c, 0);\n        this.addBorderCell(c, this.numRows - 1);\n      }\n\n      for (var r = 0; r < this.numRows; r++) {\n        this.addBorderCell(0, r);\n        this.addBorderCell(this.numCols - 1, r);\n      }\n    }\n  }, {\n    key: \"addBorderCell\",\n    value: function addBorderCell(col, row) {\n      var cell = this.grid[col][row];\n      cell.occupied = true;\n      cell[\"static\"] = true;\n      cell.img = this.sprites.border;\n      this.border.push(cell);\n    }\n  }, {\n    key: \"initPosts\",\n    value: function initPosts() {\n      this.start = this.grid[Math.ceil(Math.random() * 3) + 1][Math.ceil(Math.random() * 10) + 1];\n      var startImg = new Image();\n      startImg.src = \"/images/board/start.png\";\n      this.start.img = startImg;\n      this.start[\"static\"] = true;\n      this.goal = this.grid[Math.ceil(Math.random() * 3) + 15][Math.ceil(Math.random() * 10) + 1];\n      this.goal.value = 0;\n      var goalImg = new Image();\n      goalImg.src = \"/images/board/goal.png\";\n      this.goal.img = goalImg;\n      this.goal[\"static\"] = true;\n    }\n  }, {\n    key: \"initBlocks\",\n    value: function initBlocks() {\n      this.resetBlocks();\n\n      for (var i = 0; i < this.numBlocks; i++) {\n        var randRow = Math.floor(Math.random() * 17) + 2;\n        var randCol = Math.floor(Math.random() * 10) + 2;\n        var cell = this.grid[randRow][randCol];\n\n        if (cell !== this.start && cell !== this.goal && !cell.occupied) {\n          cell.occupied = true;\n          this.blocks.push(cell);\n        } else {\n          i--;\n        }\n      }\n    }\n  }, {\n    key: \"resetBlocks\",\n    value: function resetBlocks() {\n      this.blocks.forEach(function (block) {\n        block.occupied = false;\n      });\n      this.blocks = [];\n    }\n  }, {\n    key: \"loadPaths\",\n    value: function loadPaths() {\n      this.resetPaths();\n      var checkCells = [this.goal];\n\n      while (checkCells.length) {\n        var current = checkCells.shift();\n\n        for (var i = 0; i < current.adjacent.length; i++) {\n          var cell = current.adjacent[i];\n\n          if (cell.value === -1) {\n            checkCells.push(cell);\n            cell.value = current.value + 1;\n          }\n        }\n      }\n\n      for (var col = 0; col < this.grid.length; col++) {\n        for (var row = 0; row < this.grid[col].length; row++) {\n          if (!this.grid[col][row].occupied) {\n            this.grid[col][row].getShortestRoute();\n          }\n        }\n      }\n\n      if (!this.validated) {\n        this.ensureValidMap();\n      }\n    }\n  }, {\n    key: \"resetPaths\",\n    value: function resetPaths() {\n      var _this2 = this;\n\n      this.grid.forEach(function (col) {\n        col.forEach(function (cell) {\n          if (cell !== _this2.goal) {\n            cell.value = -1;\n            cell.adjacent = [];\n          }\n        });\n      });\n\n      for (var c = 0; c < this.numCols; c++) {\n        for (var r = 0; r < this.numRows; r++) {\n          this.grid[c][r].loadAdjacentCells();\n        }\n      }\n    }\n  }, {\n    key: \"ensureValidMap\",\n    value: function ensureValidMap() {\n      var pathBlocked = false;\n\n      for (var c = 0; c < this.numCols; c++) {\n        for (var r = 0; r < this.numRows; r++) {\n          if (this.grid[c][r].value === -1 && !this.grid[c][r].occupied) {\n            pathBlocked = true;\n          }\n        }\n      }\n\n      if (pathBlocked) {\n        this.initBlocks();\n        this.loadPaths();\n      } else {\n        this.validated = true;\n      }\n    }\n  }, {\n    key: \"nextWave\",\n    value: function nextWave() {\n      // this.cr -= this.bits;\n      this.bits = Math.ceil(this.bits / 5) * 5; // this.cr += this.bits;\n\n      if (this.wave % 10 === 0) {\n        this.difficulty += 0.5;\n      }\n\n      if (this.wave % 30 === 0) {\n        this.difficulty += 0.5;\n      }\n\n      this.bits += 5 * this.wave; // this.cr += 5 * this.wave;\n\n      this.loadCreeps(20);\n    }\n  }, {\n    key: \"loadCreeps\",\n    value: function loadCreeps(numCreeps) {\n      var creeps = [];\n\n      for (var i = 0; i < numCreeps; i++) {\n        var location = this.start.center.copy();\n        var creep = void 0;\n\n        if (i === 0) {\n          if (this.wave % 5 === 0) {\n            creep = new _creep__WEBPACK_IMPORTED_MODULE_5__[\"Uwo\"](this, this.sprites, location, this.difficulty);\n          } else {\n            creep = new _creep__WEBPACK_IMPORTED_MODULE_5__[\"Gork\"](this, this.sprites, location, this.difficulty);\n          }\n        } else {\n          creep = new _creep__WEBPACK_IMPORTED_MODULE_5__[\"Slime\"](this, this.sprites, location, this.difficulty);\n        }\n\n        creeps.push(creep);\n      }\n\n      this.stages[this.wave] = [creeps, new Date() - 1500];\n    }\n  }, {\n    key: \"sendCreeps\",\n    value: function sendCreeps() {\n      for (var wave in this.stages) {\n        var creeps = this.stages[wave][0];\n\n        if (creeps.length) {\n          var curr = new Date();\n          var lastSent = this.stages[wave][1];\n\n          if (curr - lastSent > 1500) {\n            this.creeps.push(creeps.shift());\n            this.stages[wave][1] = curr;\n          }\n        } else {\n          delete this.stages[wave];\n        }\n      }\n    }\n  }, {\n    key: \"checkHit\",\n    value: function checkHit(attack) {\n      var gridCol = Math.floor(attack.location.x / this.cellSize);\n      var gridRow = Math.floor(attack.location.y / this.cellSize);\n\n      if (this.grid[gridCol] && this.grid[gridCol][gridRow]) {\n        var cell = this.grid[gridCol][gridRow];\n        cell.attack(attack.damage, attack.type === \"water\");\n\n        for (var j = 0; j < this.creeps.length; j++) {\n          if (cell === this.creeps[j].currentCell) {\n            if (attack.type !== \"air\") attack.hit = true;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkWave\",\n    value: function checkWave() {\n      if (this.waveTimer > 0) {\n        this.waveTimer--;\n        this.dom.progress.style.width = \"\".concat(this.waveTimer / 4, \"%\");\n      } else {\n        this.sendingWave = false;\n        this.dom.wave.classList.add(\"clickable\");\n      }\n\n      if (this.creeps.length) {\n        this.dom.wave.classList.remove(\"active\");\n      } else if (!this.sendingWave) {\n        if (this.autoWave) {\n          this.dom.wave.click();\n        } else if (this.wave > 0) {\n          this.dom.wave.classList.add(\"active\");\n        } else if (this.bits < 50) {\n          this.dom.wave.classList.add(\"active\");\n          this.dom.towerMenu.classList.remove(\"active\");\n          this.tutorial.showInfo(\"canvas\");\n        }\n      }\n    } // checkStats() {\n    //   if (this.cr !== this.lives + this.score + this.bits + this.c) {\n    //     console.log(\"oh so you think you're clever\");\n    //     this.score = 0;\n    //     this.bits = 0;\n    //     this.lives = 1;\n    //     this.cr = this.lives + this.score + this.bits + this.c;\n    //   }\n    // }\n\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var path = [this.start];\n\n      while (path[path.length - 1] !== this.goal) {\n        path.push(path[path.length - 1].smallestAdjacent);\n      }\n\n      this.vertices = this.getVertices(path);\n      return path;\n    }\n  }, {\n    key: \"getVertices\",\n    value: function getVertices(path) {\n      var vertices = [];\n\n      for (var i = 1; i < path.length; i++) {\n        var cell0 = path[i - 1];\n        var cell1 = path[i];\n        var dx = cell1.center.x - cell0.center.x;\n        var dy = cell1.center.y - cell0.center.y;\n\n        for (var j = 0; j < 15; j++) {\n          var x = cell0.center.x + dx * j / 15;\n          var y = cell0.center.y + dy * j / 15;\n          vertices.push({\n            x: x,\n            y: y\n          });\n        }\n      }\n\n      return vertices;\n    }\n  }, {\n    key: \"animatePath\",\n    value: function animatePath() {\n      this.context.beginPath();\n      this.context.moveTo(this.start.center.x, this.start.center.y);\n\n      for (var i = 1; i < this.path.length; i++) {\n        var cell = this.path[i];\n        this.context.lineTo(cell.center.x, cell.center.y);\n      }\n\n      this.context.strokeStyle = \"rgba(164, 124, 194, 0.3)\";\n      this.context.lineWidth = 4;\n      this.context.stroke();\n      this.animateTravel();\n      this.point++;\n    }\n  }, {\n    key: \"animateTravel\",\n    value: function animateTravel() {\n      if (this.vertices.length <= this.point) this.point = 10;\n      this.context.beginPath();\n      this.context.arc(this.vertices[this.point - 10].x, this.vertices[this.point - 10].y, 4, 0, Math.PI * 2);\n      this.context.fillStyle = \"rgba(164, 124, 194, 0.3)\";\n      this.context.fill();\n      this.context.beginPath();\n      this.context.arc(this.vertices[this.point - 5].x, this.vertices[this.point - 5].y, 5, 0, Math.PI * 2);\n      this.context.fillStyle = \"rgba(164, 124, 194, 0.3)\";\n      this.context.fill();\n      this.context.beginPath();\n      this.context.arc(this.vertices[this.point].x, this.vertices[this.point].y, 6, 0, Math.PI * 2);\n      this.context.fillStyle = \"rgba(164, 124, 194, 0.3)\";\n      this.context.fill();\n    }\n  }, {\n    key: \"animateBorder\",\n    value: function animateBorder() {\n      if (this.border.length) {\n        for (var i = 0; i < this.border.length; i++) {\n          var cell1 = this.border[i];\n          var cell2 = this.border[this.border.length - 1 - i];\n          this.blinkCell(cell1, i);\n          this.blinkCell(cell2, i);\n        }\n\n        this.border = [];\n      }\n    }\n  }, {\n    key: \"animateBlocks\",\n    value: function animateBlocks() {\n      if (this.blocks.length) {\n        for (var i = 0; i < this.blocks.length; i++) {\n          var cell = this.blocks[i];\n          this.blinkCell(cell, i + 20);\n        }\n\n        this.blocks = [];\n      }\n    }\n  }, {\n    key: \"blinkCell\",\n    value: function blinkCell(cell, time) {\n      cell.occupied = false;\n      cell[\"static\"] = false;\n      setTimeout(function () {\n        cell.occupied = true;\n        cell[\"static\"] = true;\n      }, time * 15);\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      // this.checkStats();\n      this.actions.updateStats();\n\n      if (!this.gameOver && this.gameStarted) {\n        this.actions.showTowerInfo();\n        this.checkWave();\n        this.sendCreeps();\n        this.render();\n\n        if (this.lives <= 0) {\n          setTimeout(this.actions.handleGameOver(), 1000);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.context.clearRect(0, 0, 840, 560); // if (this.creeps.length === 0 && !this.sendingWave) {\n\n      this.animatePath(); // }\n\n      for (var c = 0; c < this.numCols; c++) {\n        this.grid[c][0].run();\n        this.grid[c][this.numRows - 1].run();\n      }\n\n      for (var r = 1; r < this.numRows - 1; r++) {\n        this.grid[0][r].run();\n        this.grid[this.numCols - 1][r].run();\n      }\n\n      for (var _c = 1; _c < this.numCols - 1; _c++) {\n        for (var _r = 1; _r < this.numRows - 1; _r++) {\n          var cell = this.grid[_c][_r];\n          if (!cell.selected) cell.run();\n        }\n      }\n\n      for (var i = 0; i < this.selectedCells.length; i++) {\n        this.selectedCells[i].renderImage(\"selectImg\");\n      }\n\n      for (var _i = 0; _i < this.towers.length; _i++) {\n        var tower = this.towers[_i];\n\n        if (!tower.removed) {\n          tower.run();\n        } else {\n          this.towers.splice(_i, 1);\n          _i--;\n        }\n      }\n\n      for (var _i2 = 0; _i2 < this.creeps.length; _i2++) {\n        var creep = this.creeps[_i2];\n\n        if (creep.alive) {\n          creep.run();\n        } else {\n          this.creeps.splice(_i2, 1);\n          _i2--;\n        }\n      }\n\n      for (var _i3 = 0; _i3 < this.selectedTowers.length; _i3++) {\n        this.selectedTowers[_i3].drawRange();\n      }\n\n      for (var _i4 = 0; _i4 < this.attacks.length; _i4++) {\n        var attack = this.attacks[_i4];\n        this.checkHit(attack);\n\n        if (!attack.hit) {\n          attack.run();\n        } else {\n          this.attacks.splice(_i4, 1);\n          _i4--;\n        }\n      }\n    }\n  }]);\n\n  return Game;\n}();\n\n\n\n//# sourceURL=webpack:///./js/game.js?");

/***/ }),

/***/ "./js/loader.js":
/*!**********************!*\
  !*** ./js/loader.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Loader; });\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(howler__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Loader = /*#__PURE__*/function () {\n  function Loader(game, dom, sprites) {\n    _classCallCheck(this, Loader);\n\n    this.game = game;\n    this.dom = dom;\n    this.sprites = sprites;\n    this.handleTitleScreen();\n  }\n\n  _createClass(Loader, [{\n    key: \"handleTitleScreen\",\n    value: function handleTitleScreen() {\n      var _this = this;\n\n      this.dom.upgrade.style.opacity = 0;\n      this.dom.sell.style.opacity = 0;\n      var title = new Image();\n      title.src = \"/images/splash/tower-time-title.png\";\n\n      title.onload = function () {\n        _this.game.context.drawImage(title, _this.dom.canvas.width / 2 - title.width / 2, 40);\n\n        _this.dom.holder.style.opacity = 100;\n      };\n\n      this.addPlayButton();\n    }\n  }, {\n    key: \"addPlayButton\",\n    value: function addPlayButton() {\n      this.dom.play.style.backgroundImage = \"url(\".concat(this.sprites.play.plain.src, \")\");\n      this.addListener(\"mouseover\", \"hover\");\n      this.addListener(\"mouseout\", \"plain\");\n      this.addListener(\"mousedown\", \"pressed\");\n      this.addListener(\"mouseup\", \"hover\");\n      this.addListener(\"click\", \"hover\", true);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(action, img, start) {\n      var _this2 = this;\n\n      this.dom.play.addEventListener(action, function (e) {\n        e.target.style.backgroundImage = \"url(\".concat(_this2.sprites.play[img].src, \")\");\n        if (start) setTimeout(_this2.handleStart.bind(_this2), 300);\n      });\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      this.dom.play.style.display = \"none\";\n      this.dom.startText.style.display = \"none\";\n      this.dom.footer.style.opacity = 0;\n      this.game.gameStarted = true;\n      this.game.run();\n      this.dom.canvas.style.backgroundColor = \"rgb(186, 186, 186)\";\n      this.dom.towerMenu.classList.add(\"active\");\n      this.dom.topBar.style.opacity = 100;\n      this.dom.bottomBar.style.opacity = 100;\n      this.dom.tutorial.style.opacity = 100;\n      this.game.animateBorder();\n      this.game.animateBlocks();\n      this.game.sound = new howler__WEBPACK_IMPORTED_MODULE_0__[\"Howl\"]({\n        src: \"../audio/towertime.mp3\",\n        loop: true\n      });\n      this.game.sound.play();\n    }\n  }]);\n\n  return Loader;\n}();\n\n\n\n//# sourceURL=webpack:///./js/loader.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom */ \"./js/dom.js\");\n/* harmony import */ var _sprites__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sprites */ \"./js/sprites.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game */ \"./js/game.js\");\n/* harmony import */ var _scores__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scores */ \"./js/scores.js\");\n\n\n\n\nwindow.addEventListener(\"load\", init);\nvar dom, sprites, game, scores, animation;\n\nfunction init() {\n  dom = dom ? dom : new _dom__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  sprites = sprites ? sprites : new _sprites__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  game = new _game__WEBPACK_IMPORTED_MODULE_2__[\"default\"](dom, sprites);\n  scores ? (scores.game = game, scores.dom = dom) : scores = new _scores__WEBPACK_IMPORTED_MODULE_3__[\"default\"](dom, game);\n  game.actions.scores = scores;\n  game.actions.init = init;\n  window.cancelAnimationFrame(animation);\n  window.setTimeout(animate, 100);\n}\n\nfunction animate() {\n  game.run();\n  animation = window.requestAnimationFrame(animate);\n}\n\n//# sourceURL=webpack:///./js/main.js?");

/***/ }),

/***/ "./js/scores.js":
/*!**********************!*\
  !*** ./js/scores.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Scores; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Scores = /*#__PURE__*/function () {\n  function Scores(dom, game) {\n    _classCallCheck(this, Scores);\n\n    this.dom = dom;\n    this.game = game;\n    this.firebase = this.loadFireBase();\n  }\n\n  _createClass(Scores, [{\n    key: \"loadFireBase\",\n    value: function loadFireBase() {\n      var firebaseConfig = {\n        apiKey: \"AIzaSyCUl00bvLb_3Ytr6Wj_L-XIp-bVX4Yb8b0\",\n        authdomain: \"tower-time.firebaseapp.com\",\n        databaseURL: \"https://tower-time.firebaseio.com\",\n        projectId: \"tower-time\",\n        storageBucket: \"tower-time.appspot.com\",\n        messagingSenderId: \"114254327718\",\n        appId: \"1:114254327718:web:7d6db95c7f120f99452967\",\n        measurementId: \"G-0BEHEHSDDL\"\n      };\n      return firebase.initializeApp(firebaseConfig);\n    }\n  }, {\n    key: \"update\",\n    value: function update(name, score) {\n      this.firebase.auth().signInAnonymously();\n      this.firebase.database().ref(\"scores\").push({\n        name: name,\n        score: score\n      });\n    }\n  }, {\n    key: \"handleScores\",\n    value: function handleScores(highscores) {\n      var _this = this;\n\n      var rankList = document.createElement(\"ul\");\n      var scoreList = document.createElement(\"ul\");\n      var nameList = document.createElement(\"ul\");\n      var lowestShowing;\n      highscores.on(\"value\", function (snap) {\n        var data = snap.val();\n        var idArr = Object.keys(data);\n        var scores = [];\n\n        for (var i = 0; i < idArr.length; i++) {\n          scores.push([data[idArr[i]].score, data[idArr[i]].name]);\n        }\n\n        _this.sortScores(scores);\n\n        var rankCount = 1;\n        scores.forEach(function (score) {\n          var rankLi = document.createElement(\"li\");\n          var scoreLi = document.createElement(\"li\");\n          var nameLi = document.createElement(\"li\");\n          rankLi.innerText = rankCount++;\n          scoreLi.innerText = score[0];\n          nameLi.innerText = score[1];\n          rankList.appendChild(rankLi);\n          scoreList.appendChild(scoreLi);\n          nameList.appendChild(nameLi);\n        });\n        lowestShowing = scores[9][0];\n      });\n      var lists = [rankList, scoreList, nameList];\n      [\"RANK\", \"SCORE\", \"NAME\"].forEach(function (column, i) {\n        var div = document.createElement(\"div\");\n        div.classList.add(\"score-div\");\n        var rankTitle = document.createElement(\"h2\");\n        rankTitle.innerText = column;\n        div.appendChild(rankTitle);\n        div.appendChild(lists[i]);\n\n        _this.dom.scores.appendChild(div);\n      });\n\n      if (this.game.score >= lowestShowing) {\n        var form = document.createElement(\"form\");\n        var input = document.createElement(\"input\");\n        input.classList.add(\"name-input\");\n        input.placeholder = \"ADD NAME\";\n        input.maxLength = 3;\n        form.appendChild(input);\n        this.dom.terminal.appendChild(form);\n        form.addEventListener(\"submit\", function (event) {\n          return _this.addScore(event, lowestShowing, form);\n        });\n      } else {\n        this.addNewGame();\n      }\n    }\n  }, {\n    key: \"addScore\",\n    value: function addScore(event, lowestShowing, form) {\n      event.preventDefault();\n      var name = document.querySelector(\".name-input\");\n      var scoreList = document.querySelectorAll(\".score-div\");\n\n      if (this.game.score >= lowestShowing) {\n        scoreList.forEach(function (div) {\n          div.querySelector(\"ul\").innerHTML = \"\";\n        });\n      }\n\n      name.style.visibility = \"hidden\";\n\n      if (this.game.f === this.game.score) {\n        this.update(name.value.toUpperCase(), this.game.f);\n      } else {\n        window.location.reload(false);\n      }\n\n      this.dom.terminal.removeChild(form);\n      this.addNewGame();\n    }\n  }, {\n    key: \"addNewGame\",\n    value: function addNewGame() {\n      var _this2 = this;\n\n      var btn = document.createElement(\"button\");\n      btn.classList.add(\"new-game\");\n      btn.innerHTML = \"NEW GAME\";\n      btn.addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this2.game.actions.newGame();\n      }, false);\n      this.dom.terminal.appendChild(btn);\n    }\n  }, {\n    key: \"sortScores\",\n    value: function sortScores(arr) {\n      var swapped;\n\n      do {\n        swapped = false;\n\n        for (var i = 0; i < arr.length - 1; i++) {\n          if (arr[i][0] < arr[i + 1][0]) {\n            var tmp = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = tmp;\n            swapped = true;\n          }\n        }\n      } while (swapped);\n\n      return arr;\n    }\n  }]);\n\n  return Scores;\n}();\n\n\n\n//# sourceURL=webpack:///./js/scores.js?");

/***/ }),

/***/ "./js/sprites.js":
/*!***********************!*\
  !*** ./js/sprites.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Sprites; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Sprites = /*#__PURE__*/function () {\n  function Sprites() {\n    _classCallCheck(this, Sprites);\n\n    this.border = new Image();\n    this.wall = new Image();\n    this.wallSelected = new Image();\n    this.tower = new Image();\n    this.attack = new Image();\n    this.slime = {};\n    this.gork = {};\n    this.uwo = {};\n    this.play = {\n      plain: new Image(),\n      hover: new Image(),\n      pressed: new Image()\n    };\n    this.addTileSources();\n    this.addCreepImages();\n  }\n\n  _createClass(Sprites, [{\n    key: \"addTileSources\",\n    value: function addTileSources() {\n      this.border.src = \"/images/board/border.png\";\n      this.border.style.opacity = 0.4;\n      this.wall.src = \"/images/board/wall.png\";\n      this.wallSelected.src = \"/images/board/wall-selected.png\";\n      this.tower.src = \"/images/towers/towers.png\";\n      this.attack.src = \"/images/towers/attacks.png\";\n      this.play.plain.src = \"/images/splash/play-button.png\";\n      this.play.hover.src = \"/images/splash/play-button-hover.png\";\n      this.play.pressed.src = \"/images/splash/play-button-pressed.png\";\n    }\n  }, {\n    key: \"addCreepImages\",\n    value: function addCreepImages() {\n      for (var i = 0; i < 5; i++) {\n        this.slime[i] = new Image();\n        this.slime[i].src = \"/images/creeps/slime/slime-\".concat(i, \".png\");\n        this.gork[i] = new Image();\n        this.gork[i].src = \"/images/creeps/gork/gork-\".concat(i, \".png\");\n        this.uwo[i] = new Image();\n        this.uwo[i].src = \"/images/creeps/uwo/uwo-\".concat(i, \".png\");\n      }\n    }\n  }]);\n\n  return Sprites;\n}();\n\n\n\n//# sourceURL=webpack:///./js/sprites.js?");

/***/ }),

/***/ "./js/tower.js":
/*!*********************!*\
  !*** ./js/tower.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Tower; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./js/vector.js\");\n/* harmony import */ var _attack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./attack */ \"./js/attack.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar Tower = /*#__PURE__*/function () {\n  function Tower(game, dom, sprites, context, idx, cost, upgrade, type, range, damage, cooldown, speed) {\n    _classCallCheck(this, Tower);\n\n    this.game = game;\n    this.dom = dom;\n    this.sprites = sprites; // * images\n\n    this.width = 32;\n    this.height = 32; // * stats\n\n    this.idx = idx;\n    this.cost = cost;\n    this.upgrade = upgrade;\n    this.type = type;\n    this.range = range;\n    this.cooldown = cooldown;\n    this.damage = damage;\n    this.speed = speed; // * location\n\n    this.cell = null;\n    this.location = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0); // * attack time\n\n    this.lastFired = Date.now(); // * direction\n\n    this.context = context;\n    this.angle = 0;\n    this.target = null;\n    this.follow = true; // * display\n\n    this.selected = false; // * init\n\n    this.level = 0;\n    this.canUpgrade = true;\n    this.visible = false;\n    this.placed = false;\n    this.removed = false;\n  }\n\n  _createClass(Tower, [{\n    key: \"findTarget\",\n    value: function findTarget() {\n      for (var i = 0; i < this.game.creeps.length; i++) {\n        var creep = this.game.creeps[i];\n\n        if (creep.alive && creep.location.dist(this.location) < this.range) {\n          this.follow = false;\n          return creep.location;\n        }\n      }\n\n      this.follow = true;\n      return new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game.actions.mouseX, this.game.actions.mouseY);\n    }\n  }, {\n    key: \"checkFire\",\n    value: function checkFire() {\n      var mils = Date.now();\n      var dist = this.location.dist(this.target);\n\n      if (dist < this.range && this.placed && !this.follow && mils - this.lastFired > this.cooldown) {\n        this.lastFired = mils;\n        var attackLocation = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.location.x, this.location.y);\n        var attack = new _attack__WEBPACK_IMPORTED_MODULE_1__[\"default\"](attackLocation, this.sprites, this.context, this.angle, this.idx, this.level, this.type, this.damage, this.speed);\n        this.game.attacks.push(attack);\n      }\n    }\n  }, {\n    key: \"handleUpgrade\",\n    value: function handleUpgrade() {\n      this.level += 1;\n      this.upgrade *= 2;\n      this.damage = Math.ceil(this.damage * 2.5 / 5) * 5;\n      this.range += 25;\n      this.speed += 2;\n\n      if (this.level === 2) {\n        this.canUpgrade = false;\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.selected = true;\n      this.cell.selected = true;\n      this.game.selectedTowers.push(this);\n      this.game.selectedCells.push(this.cell);\n    }\n  }, {\n    key: \"deselect\",\n    value: function deselect(present) {\n      this.selected = false;\n      this.cell.selected = false;\n\n      if (!present) {\n        this.removed = true;\n        this.cell.occupied = false;\n      }\n    }\n  }, {\n    key: \"drawRange\",\n    value: function drawRange() {\n      this.context.save();\n      this.context.beginPath();\n      this.context.arc(this.location.x, this.location.y, this.range, 0, Math.PI * 2);\n      this.context.strokeStyle = \"rgba(222, 255, 252, 0.4)\";\n      this.context.lineWidth = 4;\n      this.context.stroke();\n      this.context.restore();\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      this.update();\n      this.render();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.target = this.findTarget();\n      var dx = this.location.x - this.target.x;\n      var dy = this.location.y - this.target.y;\n      this.angle = Math.atan2(dy, dx) - Math.PI;\n      this.checkFire();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.visible) {\n        if (!this.placed) this.drawRange();\n        this.context.save();\n        this.context.translate(this.location.x, this.location.y);\n        this.context.rotate(this.angle);\n        this.context.drawImage(this.sprites.tower, this.level * this.width, this.idx * this.height, this.width, this.height, -this.width / 2, -this.height / 2, this.width, this.height);\n        this.context.restore();\n      }\n    }\n  }]);\n\n  return Tower;\n}();\n\n\n\n//# sourceURL=webpack:///./js/tower.js?");

/***/ }),

/***/ "./js/tutorial.js":
/*!************************!*\
  !*** ./js/tutorial.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Tutorial; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Tutorial = /*#__PURE__*/function () {\n  function Tutorial(game, dom) {\n    _classCallCheck(this, Tutorial);\n\n    this.game = game;\n    this.dom = dom;\n    this.slide1 = this.dom.tutorialSlide;\n    this.slide2 = this.dom.hotkeysSlide;\n    this.slide1.addEventListener(\"click\", this.toggleTutorial.bind(this));\n    this.slide2.addEventListener(\"click\", this.toggleHotkeys.bind(this));\n    this[\"default\"] = \"move your mouse anywhere to learn more, click here to hide tooltips\";\n    this.tips = this.makeTips();\n    this.addListeners(this.tips);\n  }\n\n  _createClass(Tutorial, [{\n    key: \"addListeners\",\n    value: function addListeners(tips) {\n      var _this = this;\n\n      var _loop = function _loop(key) {\n        var text = tips[key];\n        var div = _this.dom[key];\n        div.addEventListener(\"mouseover\", function () {\n          return _this.showInfo(key, text);\n        });\n        div.addEventListener(\"mouseout\", _this.clearTip.bind(_this));\n      };\n\n      for (var key in tips) {\n        _loop(key);\n      }\n    }\n  }, {\n    key: \"toggleTutorial\",\n    value: function toggleTutorial() {\n      this.dom.tutorialText.classList.toggle(\"hidden\");\n      this.dom.tutorialOpen = !this.dom.tutorialOpen;\n      this.dom.tutorialSlide.setAttribute(\"class\", this.dom.tutorialOpen ? \"open\" : \"closed\");\n      this.dom.tutorialIcon.classList.toggle(\"hidden\");\n    }\n  }, {\n    key: \"toggleHotkeys\",\n    value: function toggleHotkeys() {\n      this.dom.hotkeysText.classList.toggle(\"hidden\");\n      this.dom.hotkeysOpen = !this.dom.hotkeysOpen;\n      this.dom.hotkeysSlide.setAttribute(\"class\", this.dom.hotkeysOpen ? \"open\" : \"closed\");\n      this.dom.hotkeysIcon.classList.toggle(\"hidden\");\n    }\n  }, {\n    key: \"showInfo\",\n    value: function showInfo(name, tip) {\n      if (this.game.wave === 0) {\n        if (name === \"canvas\") {\n          if (this.game.bits < 50) {\n            tip = \"now that you have a few towers, you're ready to take on the first wave! good luck\";\n          } else {\n            tip = \"enemies will start at the blue square and try to get to the red one, build towers to stop them\";\n          }\n        }\n\n        if (name === \"towerMenu\") {\n          tip = \"click a tower to select it, then click on the board to buy and place it\";\n        }\n      }\n\n      if (name === \"type\") {\n        var type = this.dom.type.lastChild.innerHTML;\n\n        if (type === \"EARTH\") {\n          tip = \"earth type is a basic tower, good for using up spare bank and making long walls; packs a punch once upgraded\";\n        } else if (type === \"WATER\") {\n          tip = \"water type slows things down a little, but is also a little slow; make sure it can hit its target, or at least something...\";\n        } else if (type === \"FIRE\") {\n          tip = \"fire type is fast, but has a low range; it needs to be in the heat of battle to be fully effective\";\n        } else if (type === \"AIR\") {\n          tip = \"air type is a lofty tower, and attacks everything in its path; give it good direction and it'll blow enemies away\";\n        }\n      } else if ((name === \"upgrade\" || name === \"sell\") && !this.game.selectedTowers.length) {\n        tip = this[\"default\"];\n      }\n\n      this.dom.tutorialP.innerHTML = tip;\n      this.ensureDefault();\n    }\n  }, {\n    key: \"ensureDefault\",\n    value: function ensureDefault() {\n      if (this.dom.tutorialP.innerHTML === \"undefined\") {\n        this.dom.tutorialP.innerHTML = this[\"default\"];\n      }\n    }\n  }, {\n    key: \"clearTip\",\n    value: function clearTip() {\n      this.dom.tutorialP.innerHTML = this[\"default\"];\n    }\n  }, {\n    key: \"makeTips\",\n    value: function makeTips() {\n      return {\n        canvas: \"enemies will start at the blue square and try to get to the red one, but cannot move through blocks or towers; click on placed towers to edit them\",\n        score: \"your score increases for every enemy stopped before it reaches the red square\",\n        currWave: \"the amount of waves you have survived so far, including the current wave\",\n        lives: \"if an enemy makes it to the red square, you lose a life; reach zero lives and the this.game is over\",\n        bank: \"spend your bank on towers and upgrades; add to it by stopping enemies and sending waves\",\n        autoBox: \"select to send the next wave once there are no more enemies on the board\",\n        wave: \"send the next wave of enemies\",\n        towerMenu: \"hover over a tower to show its stats, click one to select it, then click on the board to buy a new tower of that type\",\n        type: \"the tower's type; look at individual tower notes while a tower is selected\",\n        damage: \"amount of damage each of the tower's attacks will deal to an enemy\",\n        range: \"the tower's line of sight\",\n        speed: \"how quickly the tower fires\",\n        next: \"cost to upgrade the tower\",\n        upgrade: \"upgrade the current tower for its next cost\",\n        sell: \"sell the current tower for its most recent cost\"\n      };\n    }\n  }]);\n\n  return Tutorial;\n}();\n\n\n\n//# sourceURL=webpack:///./js/tutorial.js?");

/***/ }),

/***/ "./js/vector.js":
/*!**********************!*\
  !*** ./js/vector.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Vector; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Vector = /*#__PURE__*/function () {\n  function Vector(x, y) {\n    _classCallCheck(this, Vector);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Vector, [{\n    key: \"add\",\n    value: function add(vec) {\n      this.x += vec.x;\n      this.y += vec.y;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(vec) {\n      this.x -= vec.x;\n      this.y -= vec.y;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(affected) {\n      var len = Math.sqrt(this.x * this.x + this.y * this.y);\n\n      if (len > 1 || affected) {\n        this.x /= len;\n        this.y /= len;\n      }\n\n      return new Vector(this.x, this.y);\n    }\n  }, {\n    key: \"slow\",\n    value: function slow() {\n      this.x /= 2;\n      this.y /= 2;\n      return new Vector(this.x, this.y);\n    }\n  }, {\n    key: \"addGetNew\",\n    value: function addGetNew(vec1, vec2) {\n      var x = vec1.x + vec2.x;\n      var y = vec1.y + vec2.y;\n      return new Vector(x, y);\n    }\n  }, {\n    key: \"subGetNew\",\n    value: function subGetNew(vec1, vec2) {\n      var x = vec1.x - vec2.x;\n      var y = vec1.y - vec2.y;\n      return new Vector(x, y);\n    }\n  }, {\n    key: \"getDir\",\n    value: function getDir() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"getMag\",\n    value: function getMag() {\n      var x2 = this.x * this.x;\n      var y2 = this.y * this.y;\n      return Math.sqrt.apply(x2 + y2);\n    }\n  }, {\n    key: \"setDir\",\n    value: function setDir(newAngle) {\n      var magnitude = this.getMag();\n      this.x = Math.cos(newAngle) * magnitude;\n      this.y = Math.sin(newAngle) * magnitude;\n    }\n  }, {\n    key: \"setMag\",\n    value: function setMag(magnitude) {\n      var angle = this.getDir();\n      this.x = Math.cos(angle) * magnitude;\n      this.y = Math.sin(angle) * magnitude;\n    }\n  }, {\n    key: \"dist\",\n    value: function dist(vector) {\n      var x = this.x - vector.x;\n      var y = this.y - vector.y;\n      return Math.sqrt(x * x + y * y);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new Vector(this.x, this.y);\n    }\n  }]);\n\n  return Vector;\n}();\n\n\n\n//# sourceURL=webpack:///./js/vector.js?");

/***/ }),

/***/ "./node_modules/howler/dist/howler.js":
/*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.0\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.0\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/howler/dist/howler.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });